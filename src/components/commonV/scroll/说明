batter-scroll 的 observe 触发 scroll 的 refresh 方法 refresh 重新计算变化的大小
observe-dom
  开启对 DOM 改变的探测
当插件被使用后，当这些 DOM 元素发生变化时，将会触发 scroll 的 refresh 方法。
  observe-dom 插件具有以下几个特性：
    针对改变频繁的 CSS 属性，增加 debounce
    如果改变发生在 scroll 动画过程中，则不会触发 refresh
observe-image 2.1.0
  开启对 wrapper 子元素中图片元素的加载的探测。
无论图片的加载成功与否，都会自动调用 BetterScroll 的 refresh 方法来重新计算可滚动的宽度或者高度

相当于利用了事件总线 JS的

这里是Vue封装的JS事件总线
main.js
Vue.prototype.$bus = new Vue()

子组件
    <img :src="viewdataItem.show.img" alt=""  @imageLoad="imageLoad">
load(){
  this.$bus.$emit('imageLoad')
}
父组件
<div ref='scroll'>
          //bserveImage: { debounceTime: 100 // ms } 这就运用的防抖原理
mounted(){
// 这里调用了防抖函数
const refresh = this.debounce(this.$refs.scroll.refresh)
//接收远距离子组件传过来的数据
this.$bus.$on('imageLoad',()=>{
    refresh()
 }
},
methond:{
//防抖函数  因为 refresh 要频繁的计算DOM、img的大小然后一个一个请求 性能不好 所以防抖函数
//设置了一个计时器当在时间内 有东西需要一个一个加载并请求数据的 就让他们全部加载完成再统一发送请求
//要在规定的delay内 当然加载一次刷新一次delay 直到dalay过了或者没有数据再加载了 就统一发送请求
    debounce(func,delay) {
      let timer = null
      return function(...args) {
           if (timer) clearTimeout(timer)
           timer = setTimeout(() =>{
           func.apply(this,agrs)
        },delay)
     }
  }
}
所以 batter-scroll 相当于是利用了JS事件总线来触发 refresh
